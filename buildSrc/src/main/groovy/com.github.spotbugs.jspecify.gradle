plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.diffplug.spotless'
    id 'net.ltgt.errorprone'
    id 'org.javamodularity.moduleplugin'
}

repositories {
    mavenCentral()
}

ext {
    errorproneVersion = '2.8.0'
    junitVersion = '5.7.1'
}

configurations {
    xsd {
        transitive = false
    }
}

dependencies {
    errorprone "com.google.errorprone:error_prone_core:$errorproneVersion"
    implementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    implementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
}

tasks.withType(JavaCompile) {
    modularity.inferModulePath = false
}

modularity.standardJavaRelease 11

tasks.named('compileTestJava') {
    moduleOptions {
        compileOnClasspath = true
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    moduleOptions {
        // test-harness modules do not support Java module
        // https://github.com/spotbugs/spotbugs/issues/1627
        runOnClasspath = true
    }
}

spotless {
    java {
        removeUnusedImports()
        googleJavaFormat()
        licenseHeaderFile "$rootDir/buildSrc/license-header.java"
    }
    groovyGradle {
        target '**/*.gradle'
        greclipse()
        indentWithSpaces()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                groupId = 'com.github.spotbugs'
                artifactId = 'spotbugs-jspecify-plugin'
                name = 'SpotBugs JSpecify Plugin'
                description = 'SpotBugs plugin that works with new standard annotation definitions artifact'
                url = 'https://github.com/spotbugs/spotbugs-jspecify-plugin'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:spotbugs/c-jspecify-plugin.git'
                    developerConnection = 'scm:git:git@github.com:spotbugs/spotbugs-jspecify-plugin.git'
                    url = 'https://github.com/spotbugs/spotbugs-jspecify-plugin/'
                }
            }
        }
    }
}

def unzipXsd = tasks.register('unzipXsd', Copy) {
    from zipTree(configurations.xsd.singleFile).matching {
        include 'findbugsplugin.xsd'
        include 'messagecollection.xsd'
    }
    into "$buildDir/xsd"
}

def validateFindBugsXml = tasks.register('validateFindBugsXml') {
    doFirst {
        ant {
            schemavalidate (
                    file: 'src/main/resources/findbugs.xml',
                    noNamespaceFile: "$buildDir/xsd/findbugsplugin.xsd"
                    ) {
                        schema(
                                namespace: "http://www.w3.org/2001/XMLSchema-instance",
                                file: "$buildDir/xsd/findbugsplugin.xsd"
                                )
                    }
        }
    }
    dependsOn unzipXsd
}

def validateMessageXml = tasks.register('validateMessageXml') {
    doFirst {
        ant {
            schemavalidate (
                    file: 'src/main/resources/messages.xml',
                    noNamespaceFile: "$buildDir/xsd/messagecollection.xsd"
                    ) {
                        schema (
                                namespace: "http://www.w3.org/2001/XMLSchema",
                                file: "$buildDir/xsd/messagecollection.xsd"
                                )
                    }
        }
    }
    dependsOn unzipXsd
}

def validateXml = tasks.register('validateXml') {
    dependsOn validateFindBugsXml
    dependsOn validateMessageXml
}

tasks.named('check') {
    dependsOn validateXml
}
